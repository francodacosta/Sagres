<?php
namespace Sagres\Defenition;

use Sagres\Configuration\ConfigurationStore;

/**
 * Test class for CommandDefenitionBuilder.
 * Generated by PHPUnit on 2012-03-06 at 09:20:37.
 */
class CommandDefenitionBuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var CommandDefenitionBuilder
     */
    protected $object;

    private $config_only_steps = array(
        'commands' => array(
             'only_steps' => array(
                  'execute' => array(
                       array('step' => 'foo1'),
                       array('step' => 'foo2'),
                       array('step' => 'foo3'),
                   )
              ),
         )
    );
    private $config_steps_and_commands = array(
        'commands' => array(
             'only_steps' => array(
                  'execute' => array(
                       array('step' => 'foo1'),
                       array('step' => 'foo2'),
                       array('step' => 'foo3'),
                   )
              ),

              'steps_commands' => array(
                      'execute' => array(
                           array('command' => 'only_steps'),
                           array('step' => 'foo4'),
                       )
               ),
         )
    );

    private $config_error_no_section = array();

    private $config_error_no_execute =  array(
        'commands' => array(
             'only_steps' => array(
                  'executesasdadasd' => array(
                       'step' => 'foo1',
                       'step' => 'foo2',
                       'step' => 'foo3',
                   )
              ),
         )
    );
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    private function createConfigStore ($data)
    {

        return  new ConfigurationStore($data);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Sagres\Defenition\CommandDefenitionBuilder::build
     * @expectedException Sagres\Exception\InvalidConfig
     */
    public function testBuild_onlySteps_no_section()
    {
        $o = new CommandDefenitionBuilder('only_steps', $this->createConfigStore($this->config_error_no_section) );
        $o->build();
    }

    /**
     * @covers Sagres\Defenition\CommandDefenitionBuilder::build
     * @expectedException Sagres\Exception\InvalidConfig
     */
    public function testBuild_onlySteps_no_command()
    {
        $instructions = $this->createConfigStore($this->config_only_steps);
        $o = new CommandDefenitionBuilder('non_existing_command_name', $instructions);

        $data = $o->build();
    }

    /**
     * @covers Sagres\Defenition\CommandDefenitionBuilder::build
     * @expectedException Sagres\Exception\InvalidConfig
     */
    public function testBuild_onlySteps_no_execute()
    {
        $instructions = $this->createConfigStore($this->config_error_no_execute);
        $o = new CommandDefenitionBuilder('only_steps', $instructions);

        $data = $o->build();
    }

    /**
     * @covers Sagres\Defenition\CommandDefenitionBuilder::build
     */
    public function testBuild_onlySteps()
    {
        $instructions = $this->createConfigStore($this->config_only_steps);
        $o = new CommandDefenitionBuilder('only_steps', $instructions);

        $data = $o->build();

        $this->assertTrue( $data instanceof Command );

        $executes = $data->getExecutes();
        $this->assertEquals(3, count($executes));

        $execute1 = $executes[0];
        $this->assertEquals('step', $execute1->getType());
        $this->assertEquals('foo1', $execute1->getAction());
    }

    /**
     * @covers Sagres\Defenition\CommandDefenitionBuilder::build
     */
    public function testBuild_stepsWithCommands()
    {

        $instructions = $this->createConfigStore($this->config_steps_and_commands);
        $o = new CommandDefenitionBuilder('steps_commands', $instructions);

        $data = $o->build();

        $this->assertTrue( $data instanceof Command );

        $executes = $data->getExecutes();

        $this->assertEquals(2, count($executes));

        $execute1 = $executes[0];
        $this->assertEquals('command', $execute1->getType());
        $this->assertTrue( $execute1->getAction() instanceof Command);

        $execute2 = $executes[1];
        $this->assertEquals('step', $execute2->getType());
         $this->assertEquals('foo4', $execute2->getAction());
    }

}
?>
