<?php
namespace Sagres\Framework\FileSystem;

/**
 * Test class for Action.
 * Generated by PHPUnit on 2012-03-06 at 12:25:35.
 */
class ActionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Action
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Action;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Sagres\Framework\FileSystem\Action::getFileSet
     * @covers Sagres\Framework\FileSystem\Action::setFileSet
     */
    public function testSetGetFileSet()
    {
        $set = new Set();
        $this->object->setFileSet($set);
        $this->assertSame($set, $this->object->getFileSet());
    }

    private function resetFolder($folder) {

        if( $dh = opendir($folder)) {
            while (($filename = readdir($dh)) !== false) {
                if(! in_array($filename, array('.', '..'))) {
                    unlink($folder . DIRECTORY_SEPARATOR . $filename);
                }
            }
        }

        if(file_exists($folder)) {
            rmdir($folder);
        }
        mkdir($folder, 0777);
    }

    /**
     * @covers Sagres\Framework\FileSystem\Action::copyToFolder
     */
    public function testCopyToFolder()
    {
        $fileSet = new Set();
        $fileSet->addSet(__DIR__ . '/../../../../fixtures/folder1');

        $folder = __DIR__ . '/../../../../fixtures/copy';

        // make sure the folder is empty
        $this->resetFolder($folder);


        $this->object->setFileSet($fileSet);
        $this->object->copyToFolder($folder);

        $this->assertTrue(file_exists($folder . '/file1.txt'));
        $this->assertTrue(file_exists($folder . '/file2.yml'));
        $this->assertTrue(file_exists($folder . '/file3.txt'));
    }

    /**
     * @covers Sagres\Framework\FileSystem\Action::copyToFolder
     * @expectedException Sagres\Framework\FileSystem\Exception\notFound
     * @depends testCopyToFolder
     */
    public function testCopyToFolder_folderNotFound()
    {
        $fileSet = new Set();
        $fileSet->addSet(__DIR__ . '/../../../../fixtures/folder1');

        $folder = __DIR__ . '/../../../../fixtures/' . md5(time());

        $this->object->setFileSet($fileSet);
        $this->object->copyToFolder($folder);

    }
    /**
     * @covers Sagres\Framework\FileSystem\Action::copyToFolder
     * @expectedException Sagres\Framework\FileSystem\Exception\IOException
     * @depends testCopyToFolder
     */
    public function testCopyToFolder_BailoutIfOverwitingFiles()
    {
        $fileSet = new Set();
        $fileSet->addSet(__DIR__ . '/../../../../fixtures/folder1');

        $folder = __DIR__ . '/../../../../fixtures/copy';

        $this->object->setFileSet($fileSet);
        $this->object->copyToFolder($folder);

    }

    /**
     * @covers Sagres\Framework\FileSystem\Action::copyToFolder
     * @expectedException Sagres\Framework\FileSystem\Exception\InvalidPermissions
     * @depends testCopyToFolder
     */
    public function testCopyToFolder_foldernotWritable()
    {
        $fileSet = new Set();
        $fileSet->addSet(__DIR__ . '/../../../../fixtures/folder1');

        $folder = __DIR__ . '/../../../../fixtures/copy1';

        $this->resetFolder($folder);
        chmod($folder, 0444);

        $this->object->setFileSet($fileSet);
        $this->object->copyToFolder($folder);

    }


    /**
     * @covers Sagres\Framework\FileSystem\Action::__construct
     */
    public function testconstructor()
    {
        $fileSet = new Set();
        $o =new Action($fileSet);

        $this->assertSame($fileSet, $o->getFileSet());

    }
}
?>
